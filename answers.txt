# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Vincent Cheung
Student ID: 603779249
Email: vincentwcheung@gmail.com

# Partner 2 (if you're working in a team)
Name: Vincent Kyi
Student ID: 803916486
Email: vincekyi@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

The method we used was fork()ing so that instead of performing task_download() and task_upload() serially, we have the children download/upload then exit while the parent continues to run - spawning more children to download/upload until we are done.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

-A buffer overrun bug which was fixed was the filename, which previously could have been too long (larger than the buffer size of FILENAMESIZ).
-Another buffer overrun bug which was patched by returning TBUF_ERROR if reading beyond the task_t's buffer in read_to_taskbuf().


# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
-A check to make sure that a peer is only able to ask for files in the current directory and not any other directories.
-temp fix of increasing TASKBUFSIZ to not get 'tracker connection closed prematurely!' message
-limited the task_download() recursive call to only try downloading from a certain number of seeders (MAX_DL_ATTEMPTS) so it doesnt waste time trying too long trying to find a peer.
-Added a check to see how slow the seeder is.. if it is too slow (slower than MIN_DATARATE), then re try.
-Limited the size of file to be downloaded to MAX_FILE_SIZE

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
